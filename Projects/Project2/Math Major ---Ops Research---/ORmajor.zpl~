
# Number of classes

set C := {"21A","21B","21C","21D", "22A&108or67","25","22B","128A","135A","135B","127A","127B","127C", "160", "168", "167", "150A", "CPSN"};

set E := {<"21A","21B">, <"21B","21C">, <"21C","21D">, <"21C","22A&108or67">, <"21C","25">, <"21C","128A">, <"22A&108or67", "22B">, <"22A&108or67", "150A">, <"22A&108or67", "167">, <"22A&108or67", "127A">, <"22A&108or67", "168">, <"22A&108or67", "135A">, <"22A&108or67", "CPSN">, <"167","160">, <"127A","127B">, <"127B","127C">, <"135A","135B">, <"127B","CPSN">, <"21D","127B">, <"22B","167">};

set Q := { 1..12 };
set CQ := Q * C;

# Edge variable 
var x[CQ] binary;
var z[E] binary;
var y[C] integer;

# Quaters
param quater[Q * C] := 
     |"21A","21B","21C","21D", "22A&108or67","25","22B","128A","135A","135B","127A","127B","127C", "160", "168", "167", "150A", "CPSN"|
  | 1|    1,    1,    1,    1,             1,   1,    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,      1,      1|                             | 2|    2,    2,    2,    2,             2,   2,    2,     2,     2,     2,     2,     2,     2,     2,     2,     2,      2,      2|
  | 3|    3,    3,    3,    3,             3,   3,    3,     3,     3,     3,     3,     3,     3,     3,     3,     3,      3,      3|
  | 4|    4,    4,    4,    4,             4,   4,    4,     4,     4,     4,     4,     4,     4,     4,     4,     4,      4,      4|
  | 5|    5,    5,    5,    5,             5,   5,    5,     5,     5,     5,     5,     5,     5,     5,     5,     5,      5,      5|
  | 6|    6,    6,    6,    6,             6,   6,    6,     6,     6,     6,     6,     6,     6,     6,     6,     6,      6,      6|
  | 7|    7,    7,    7,    7,             7,   7,    7,     7,     7,     7,     7,     7,     7,     7,     7,     7,      7,      7|
  | 8|    8,    8,    8,    8,             8,   8,    8,     8,     8,     8,     8,     8,     8,     8,     8,     8,      8,      8|
  | 9|    9,    9,    9,    9,             9,   9,    9,     9,     9,     9,     9,     9,     9,     9,     9,     9,      9,      9|
  |10|   10,   10,   10,   10,            10,  10,   10,    10,    10,    10,    10,    10,    10,    10,    10,    10,     10,     10|
  |11|   11,   11,   11,   11,            11,  11,   11,    11,    11,    11,    11,    11,    11,    11,    11,    11,     11,     11|
  |12|   12,   12,   12,   12,            12,  12,   12,    12,    12,    12,    12,    12,    12,    12,    12,    12,     12,     12|;



# Minimize quaters
minimize major_quaters:
  sum <q,c> in CQ : quater[q,c] * x[q,c];

#Max/min classes each quater
subto max_classes:
  forall <q> in Q do
     sum <c> in C : x[q,c] <= 3;


subto min_classes:
  forall <q> in Q do
     sum <c> in C : x[q,c] >= 0;

#Take prerequisites first 
subto oneafter:
  forall <c> in C do
    sum <q> in Q : x[q,c] == 1;

subto firstclasses: 
  forall <i,j> in E do
    sum <q> in Q : quater[q,j] * x[q,j] - sum <q> in Q : quater[q,i] * x[q,i] >= 1;

